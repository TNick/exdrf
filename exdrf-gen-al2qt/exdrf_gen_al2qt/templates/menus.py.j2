# This file was automatically generated using the exdrf_gen package.
# Source: {{ source_module }} -> {{ source_templ }}
# Don't change it manually.
import logging
from typing import TYPE_CHECKING, Type

from PyQt5.QtWidgets import QMenu, QAction
from exdrf_qt.controls.seldb.sel_db import SelectDatabaseDlg

# exdrf-keep-start other_imports ----------------------------------------------
{{other_imports}}
# exdrf-keep-end other_imports ------------------------------------------------

{%- for name, c_res in categ_map.items() %}
{% for res_name in sorted(c_res) -%}
{%- set mdl = dset[res_name] %}
from {{ out_module }}.{{ mdl.categories[0] }}.{{ mdl.snake_case_name_plural }}.api import (
    Qt{{ res_name }}List
)
{%- endfor %}
{%- endfor %}
from exdrf_qt.context_use import QtUseContext
from exdrf_qt.controls.table_list import ListDb

if TYPE_CHECKING:
    from exdrf_qt.context import QtContext  # noqa: F401

logger = logging.getLogger(__name__)
# exdrf-keep-start other_globals ----------------------------------------------
{{other_globals}}
# exdrf-keep-end other_globals ------------------------------------------------


class OpenListAc(QAction, QtUseContext):
    """Action to open a list of a model."""
    list_class: Type[ListDb]

    def __init__(
        self,
        label: str,
        menu: QMenu,
        ctx: "QtContext",
        list_class: Type[ListDb]
    ):
        """Initialize the action."""
        super().__init__(label, menu)
        self.list_class = list_class
        self.ctx = ctx
        self.triggered.connect(self.open_list)
        menu.addAction(self)

    def open_list(self):
        """Open the list of the model."""
        try:
            if not self.ctx.ensure_db_conn():
                return
            w = self.list_class(ctx=self.ctx)
            if len(w.windowTitle()) == 0:
                w.setWindowTitle(self.text())
            self.ctx.create_window(w, self.text())
        except Exception as e:
            logger.error(
                "Error opening list", exc_info=True
            )
            self.ctx.show_error(
                title=self.t("cmn.open-list.title", "Error opening list"),
                message=self.t(
                    "cmn.open-list.message",
                    "An error occurred while opening the list: {e}",
                    e=e
                ),
            )
            return


class ExdrfMenus:
    """Contains all the actions and menus for the application."""
    {%- for name, c_res in categ_map.items() %}
    {{ name }}_menu: QMenu
    {% for res_name in sorted(c_res) -%}
    {%- set mdl = dset[res_name] %}
    open_{{ mdl.snake_case_name }}_list_ac: OpenListAc
    {%- endfor %}
    {% endfor %}
    show_conn_settings_ac: QAction

    # exdrf-keep-start other_menus_attributes ---------------------------------
{{other_menus_attributes}}
    # exdrf-keep-end other_menus_attributes -----------------------------------

    def __init__(self, ctx: "QtContext", parent: QMenu):
        """Initialize the menus."""
        self.ctx = ctx
        {% for name, c_res in categ_map.items() %}
        self.{{ name }}_menu = QMenu(
            self.ctx.t("menus.{{ name }}.t", "{{ name.title() }}"),
            parent
        )
        parent.addMenu(self.{{name}}_menu)
        {% for res_name in sorted_resources_for_ui(dset, c_res) %}
        {%- set mdl = dset[res_name] %}
        self.open_{{ mdl.snake_case_name }}_list_ac = OpenListAc(
            self.ctx.t(
                "menus.{{ name }}.{{ mdl.snake_case_name }}.list",
                "{{ mdl.text_name }} list"
            ),
            self.{{name}}_menu,
            ctx,
            Qt{{ res_name }}List,
        )
        {%- endfor %}
        {% endfor %}
        self.show_conn_settings_ac = QAction(
            "Connection settings", parent
        )
        self.show_conn_settings_ac.triggered.connect(
            lambda: SelectDatabaseDlg.change_connection_str(ctx)  # type: ignore
        )
        parent.addAction(self.show_conn_settings_ac)
        # exdrf-keep-start extra_menus_init -----------------------------------
{{extra_menus_init}}
        # exdrf-keep-end extra_menus_init -------------------------------------

    # exdrf-keep-start extra_menus_content ------------------------------------
{{extra_menus_content}}
    # exdrf-keep-end extra_menus_content --------------------------------------

# exdrf-keep-start more_content ------------------------------------------------
{{more_content}}
# exdrf-keep-end more_content --------------------------------------------------
{{- "\n" -}}
