# This file was automatically generated using the exdrf_gen package.
# Source: {{ source_module }} -> {{ source_templ }}
# Don't change it manually.
import logging
from typing import TYPE_CHECKING

from PyQt5.QtWidgets import QMenu, QAction
from exdrf_qt.controls.seldb.sel_db import SelectDatabaseDlg
from exdrf_qt.controls.crud_actions import OpenListAc

# exdrf-keep-start other_imports ----------------------------------------------
{{other_imports}}
# exdrf-keep-end other_imports ------------------------------------------------

if TYPE_CHECKING:
    from exdrf_qt.context import QtContext  # noqa: F401

logger = logging.getLogger(__name__)
# exdrf-keep-start other_globals ----------------------------------------------
{{other_globals}}
# exdrf-keep-end other_globals ------------------------------------------------


class ExdrfMenus:
    """Contains all the actions and menus for the application."""
    {%- for name, c_res in categ_map.items() %}
    {{ name }}_menu: QMenu
    {% for res_name in sorted(c_res) -%}
    {%- set mdl = dset[res_name] %}
    open_{{ mdl.snake_case_name }}_list_ac: OpenListAc
    {%- endfor %}
    {% endfor %}
    show_conn_settings_ac: QAction

    # exdrf-keep-start other_menus_attributes ---------------------------------
{{other_menus_attributes}}
    # exdrf-keep-end other_menus_attributes -----------------------------------

    def __init__(self, ctx: "QtContext", parent: QMenu):
        """Initialize the menus."""
        self.ctx = ctx
        {% for name, c_res in categ_map.items() %}
        self.{{ name }}_menu = QMenu(
            self.ctx.t("menus.{{ name }}.t", "{{ name.title() }}"),
            parent
        )
        parent.addMenu(self.{{name}}_menu)
        {% set ns = namespace(separator_added=False) %}
        {% for res_name in sorted_resources_for_ui(dset, c_res) %}
        {%- set mdl = dset[res_name] %}
        self.open_{{ mdl.snake_case_name }}_list_ac = OpenListAc(
            self.ctx.t(
                "menus.{{ name }}.{{ mdl.snake_case_name }}.list",
                "{{ mdl.text_name }} list"
            ),
            ctx=ctx,
            route="exdrf://navigation/resource/{{ mdl.pascal_case_name }}",
            menu_or_parent=self.{{name}}_menu,
        )
        {%- if not ns.separator_added and mdl.is_connection_resource %}
        self.{{name}}_menu.addSeparator()
        {%- set ns.separator_added = True %}
        {%- endif %}
        {% endfor %}
        {% endfor %}
        self.show_conn_settings_ac = QAction(
            "Connection settings", parent
        )
        self.show_conn_settings_ac.triggered.connect(
            lambda: SelectDatabaseDlg.change_connection_str(ctx)  # type: ignore
        )
        parent.addAction(self.show_conn_settings_ac)
        
        # exdrf-keep-start extra_menus_init -----------------------------------
{{extra_menus_init}}
        # exdrf-keep-end extra_menus_init -------------------------------------

    # exdrf-keep-start extra_menus_content ------------------------------------
{{extra_menus_content}}
    # exdrf-keep-end extra_menus_content --------------------------------------

# exdrf-keep-start more_content ------------------------------------------------
{{more_content}}
# exdrf-keep-end more_content --------------------------------------------------
{{- "\n" -}}
