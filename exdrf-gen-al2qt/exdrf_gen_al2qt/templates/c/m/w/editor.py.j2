# This file was automatically generated using the exdrf_gen package.
# Source: {{ source_module }} -> {{ source_templ }}
# Don't change it manually.

from typing import TYPE_CHECKING, Union

from exdrf.constants import RecIdType
from exdrf_qt.controls import EditorDb

from {{ out_module }}.{{ categories[0] }}.{{ res_p_snake }}.widgets.{{ res_snake }}_editor_ui import (
    Ui_Qt{{ ResPascal }}Editor
)

if TYPE_CHECKING:
    from exdrf_qt.context import QtContext  # noqa: F401
    from sqlalchemy.orm import Session  # noqa: F401

    from {{ db_module }}.{{ r.categories[0] }}.api import {{ ResPascal }}  # noqa: F401


class Qt{{ ResPascal }}Editor(
    EditorDb["{{ ResPascal }}"],
    Ui_Qt{{ ResPascal }}Editor
):
    """A widget that allows the user to edit a {{ ResPascal }} record.
    """
    def __init__(self, ctx: "QtContext", **kwargs):
        """Initialize the editor widget."""
        from {{ db_module }} import (
            {{ ResPascal }} as Db{{ ResPascal }}
        )

        super().__init__(
            ctx=ctx,
            db_model=Db{{ ResPascal }},
            **kwargs
        )
        self.verticalLayout.addWidget(self.create_button_box())

    def editing_changed(self, value: bool):
        pass

    def read_record(
        self,
        session: "Session",
        record_id: RecIdType
    ) -> "{{ ResPascal }}":
        return session.scalar(
            self.selection.where(
                {%- if res_spl_id %}
                self.db_model.{{ res_primaries[0] }} == record_id,  # type: ignore[operator]
                {%- else %}
                {%- for itr, prm in enumerate(res_primaries) %}
                self.db_model.{{ prm }} == record_id[{{ itr }}],  # type: ignore[operator]
                {%- endfor %}
                {%- endif %}
            )
        )

    def populate(self, record: Union["{{ ResPascal }}", None]):
        {%- for prm in res_primaries %}
        self.c_{{ prm }}.setText(str(record.{{ prm }}) if record else "")
        {%- endfor %}
        super().populate(record)

    def get_id_of_record(self, record: "{{ ResPascal }}") -> RecIdType:
        {%- if res_spl_id %}
        return record.{{ res_primaries[0] }}
        {%- else %}
        return (
            {%- for prm in res_primaries %}
            record.{{ prm }},
            {%- endfor %}
        )
        {%- endif %}
{{- "\n" -}}
