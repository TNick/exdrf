# This file was automatically generated using the exdrf_gen package.
# Source: {{ source_module }} -> {{ source_templ }}
# Don't change it manually.

from typing import TYPE_CHECKING, Union, cast, Any

from exdrf.constants import RecIdType
from exdrf_qt.controls import ExdrfEditor
from exdrf_qt.plugins import exdrf_qt_pm, safe_hook_call

from {{ out_module }}.{{ categories[0] }}.{{ res_p_snake }}.widgets.{{ res_snake }}_editor_ui import (
    Ui_Qt{{ ResPascal }}Editor
)

# exdrf-keep-start other_imports ----------------------------------------------
{{other_imports}}
# exdrf-keep-end other_imports ------------------------------------------------

if TYPE_CHECKING:
    from exdrf_qt.context import QtContext  # noqa: F401
    from sqlalchemy.orm import Session  # noqa: F401

    from {{ db_module }}.{{ categories[0] }}.api import {{ ResPascal }}  # noqa: F401

# exdrf-keep-start other_globals ----------------------------------------------
{{other_globals}}
# exdrf-keep-end other_globals ------------------------------------------------

class Qt{{ ResPascal }}Editor(
    ExdrfEditor["{{ ResPascal }}"],
    Ui_Qt{{ ResPascal }}Editor
):
    """A widget that allows the user to edit a {{ ResPascal }} record.
    """
    # exdrf-keep-start other_attributes ---------------------------------------
{{other_attributes}}
    # exdrf-keep-end other_attributes -----------------------------------------

    def __init__(self, ctx: "QtContext", **kwargs):
        """Initialize the editor widget."""
        from {{ db_module }}.{{ categories[0] }}.api import (
            {{ ResPascal }} as Db{{ ResPascal }}
        )

        super().__init__(
            ctx=ctx,
            db_model=kwargs.pop("db_model", ctx.get_ovr(
                "{{ out_module }}.{{ categories[0] }}.{{ res_p_snake }}.editor.model",
                Db{{ ResPascal }}
            )),
            **kwargs
        )
        self.verticalLayout.addWidget(self.create_button_box())

        self.setWindowTitle(
            self.t(
                "{{ res_snake }}.ed.title", 
                "{{ r.text_name }} editor"
            ),
        )

        # Inform plugins that the editor has been created.
        safe_hook_call(
            exdrf_qt_pm.hook.{{ res_snake }}_editor_created,
            widget=self
        )

        # exdrf-keep-start extra_init -----------------------------------------
{{extra_init}}
        # exdrf-keep-end extra_init -------------------------------------------

    def editing_changed(self, value: bool):
        pass

    def read_record(
        self,
        session: "Session",
        record_id: RecIdType
    ) -> "{{ ResPascal }}":
        return session.scalar(
            self.selection.where(
                {%- if res_spl_id %}
                self.db_model.{{ res_primaries[0] }} == record_id,  # type: ignore
                {%- else %}
                {%- for itr, prm in enumerate(res_primaries) %}
                self.db_model.{{ prm }} == record_id[{{ itr }}],  # type: ignore
                {%- endfor %}
                {%- endif %}
            )
        )

    def populate(self, record: Union["{{ ResPascal }}", None]):
        {#- Enumerate read-only fields #}
        {%- for ro_field, ro_data in read_only_fields.items() %}
        {%- set f_clean_name = ro_field.replace(r.name + ".", "") %}
        {#- the field may be indicated by name or by resource.field #}
        {%- if ro_field.startswith(r.name + ".") or ro_field in r %}
        {#- the structure may provide an override #}
        {%- set rec_to_str = ro_data.get("rec_to_str", None) %}
        {%- if rec_to_str %}
        {{ rec_to_str.format(field=f_clean_name) }}
        {%- elif r[f_clean_name].primary or not r[f_clean_name].fk_to %}
        if hasattr(record, "c_{{ f_clean_name }}") and self.c_{{ f_clean_name }}:
            self.c_{{ f_clean_name }}.setText(
                str(record.{{ f_clean_name }}) if record else ""
            )
        {%- endif%}
        {%- endif %}
        {%- endfor %}
        self._populate(record, [
        {#- exclude read-only fields #}
        {%- for prm in read_only_fields %}
            {%- if prm.startswith(r.name + ".") %}
            '{{ prm.split(".")[1] }}',
            {%- elif prm in r %}
            '{{ prm }}',
            {%- endif %}
        {%- endfor %}
        ])

    def get_id_of_record(self, record: "{{ ResPascal }}") -> RecIdType:
        {%- if res_spl_id %}
        return record.{{ res_primaries[0] }}
        {%- else %}
        return cast(Any, (
            {%- for prm in res_primaries %}
            record.{{ prm }},
            {%- endfor %}
        ))
        {%- endif %}

    # exdrf-keep-start extra_editor_content ------------------------------------
{{extra_editor_content}}
    # exdrf-keep-end extra_editor_content --------------------------------------


# exdrf-keep-start more_content ------------------------------------------------
{{more_content}}
# exdrf-keep-end more_content --------------------------------------------------
{{- "\n" -}}
