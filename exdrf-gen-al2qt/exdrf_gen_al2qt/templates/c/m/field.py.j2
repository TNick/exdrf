# This file was automatically generated using the exdrf_gen package.
# Source: {{ source_module }} -> {{ source_templ }}
# Don't change it manually.

from typing import TYPE_CHECKING, Any, Dict, List, Tuple
from datetime import datetime, date
from attrs import define, field

from exdrf_qt.models.fields import Qt{{ fld_bc }}Field
{%- if fld_is_ref %}
from exdrf.constants import RecIdType
from sqlalchemy.orm import aliased
{%- endif %}
from exdrf_qt.models.fi_op import filter_op_registry
from sqlalchemy import or_, exists

# exdrf-keep-start other_imports ----------------------------------------------
{{other_imports}}
# exdrf-keep-end other_imports ------------------------------------------------

if TYPE_CHECKING:
    from {{ db_module }}.{{ r.categories[0] }}.api import {{ ResPascal }}  # noqa: F401
    {%- if fld_is_ref %}
    from {{ db_module }}.{{ field.ref.categories[0] }}.api import {{ field.ref.pascal_case_name }}  # noqa: F401
    from exdrf.resource import ExResource  # noqa: F401
    {%- endif %}
    from exdrf_qt.models.selector import Selector
    from exdrf.filter import FieldFilter


@define
class {{ FldPascal }}Field(Qt{{ fld_bc }}Field["{{ ResPascal }}"]):
    """{%- if field.description -%}{{ field.description }}{% endif %}
    """
    name: str = field(default="{{ field.name }}", init=False)
    title: str = field(default="{{ field.title }}")
    {%- if field.description %}
    description: str = field(default=(
        {%- for line in field.doc_lines %}
        "{{ line }}"
        {%- endfor %}
    ))
    {%- endif %}

    {%- for part_name, part_class, part_default in gfp(field, fld_attrs, fld_bc) %}
    {%- if part_default.startswith('[') %}
    {{ part_name }}: {{ part_class }} = field(factory=lambda: {{ part_default }})
    {%- else %}
    {{ part_name }}: {{ part_class }} = field(default={{ part_default }})
    {%- endif %}
    {%- endfor %}

    # exdrf-keep-start other_attributes ---------------------------------------
{{other_attributes}}
    # exdrf-keep-end other_attributes -----------------------------------------

    {# --------------------------------------------------------------------- #}
    {#- Only for reference fields -#}
    {%- if fld_is_ref %}
    ref: "ExResource" = field(default=None, repr=False)

    def part_id(self, record: "{{ field.ref.pascal_case_name }}") -> RecIdType:
        """Compute the ID for one of the components of the field."""
        {%- if field.ref.is_primary_simple %}
        return record.{{ field.ref.primary_fields()[0] }}
        {%- else %}
        return (
            {%- for prm in field.ref.primary_fields() %}
            record.{{ prm }},
            {%- endfor %}
        )
        {%- endif %}

    def part_label(self, record: "{{ field.ref.pascal_case_name }}") -> str:
        """Compute the label for one of the components of the field."""
        return {{ field.ref.label_to_python() }}
    
    def apply_filter(self, item: "FieldFilter", selector: "Selector") -> Any:
        from {{ db_module }}.{{ field.ref.categories[0] }}.api import {{ field.ref.name }} as Db{{ field.ref.name }}

        predicate = filter_op_registry[item.op].predicate
        related_entity = getattr(self.resource.db_model, self.name)
        # {{ field }}
        subq = related_entity.
        {%- if field.is_many_to_many_type or field.is_one_to_many_type -%}
            any
        {%- else -%}
            has
        {%- endif -%}
        (
        {%- if len(field.ref.get_fields_for_ref_filtering()) == 1 %}
            predicate(Db{{ field.ref.name }}.{{ field.ref.get_fields_for_ref_filtering()[0].name }}, item.vl),
        {%- else %}
            or_(
                {%- for other_f in field.ref.get_fields_for_ref_filtering() %}
                predicate(Db{{ field.ref.name }}.{{ other_f.name }}, item.vl),
                {%- endfor %}
            )
        {%- endif %}
        )
        return subq


        with_alias = aliased(Db{{ field.ref.name }})
        predicate = filter_op_registry[item.op].predicate
        selector.joins.append(
            (
                with_alias,
                getattr(self.resource.db_model, self.name),
                { 'isouter': True }
            )
        )

        {% if len(field.ref.get_fields_for_ref_filtering()) == 1 -%}
        return predicate(
            with_alias.{{ field.ref.get_fields_for_ref_filtering()[0].name }},
            item.vl,
        )
        {%- else %}
        return or_(
            {%- for other_f in field.ref.get_fields_for_ref_filtering() %}
            predicate(
                with_alias.{{ other_f.name }},
                item.vl,
            ),
            {%- endfor %}
        )
        {%- endif %}

    {%- endif %}
    {#- Only for reference fields -#}
    {# --------------------------------------------------------------------- #}

    # exdrf-keep-start extra_field_content ------------------------------------
{{extra_field_content}}
    # exdrf-keep-end extra_field_content --------------------------------------


# exdrf-keep-start more_content -----------------------------------------------
{{more_content}}
# exdrf-keep-end more_content -------------------------------------------------
{{- "\n" -}}
